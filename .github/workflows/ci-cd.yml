name: CI/CD for Liquidator Bot

on:
  push:
    branches:
      - main
      - develop
      - staging
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
        type: string
      deploy_to_v2:
        description: 'Deploy to liquidator-bot-v2 as well'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read

jobs:
  lint-test-build:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Build with TypeScript
        run: yarn build

  lint-test-build-deploy:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Build with TypeScript
        run: yarn build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::864899827754:role/GithubAccess-Role-i5z555522u1j

      - name: Login to Amazon ECR
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Deploy to liquidator-bot
        env:
          AWS_REGION: ap-southeast-1
          AWS_ECR_REGISTRY_URI: 864899827754.dkr.ecr.ap-southeast-1.amazonaws.com
          AWS_ECR_REPOSITORY_NAME: liquidator-bot
        run: |
          #!/bin/bash
          set -e
          set -o pipefail
          
          # Determine branch name
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            BRANCH_NAME="${{ github.event.inputs.branch }}"
          else
            BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          fi
          
          # Login to ECR
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY_URI
          
          # Get latest commit hash
          latest_commit=$(git rev-parse --short HEAD)
          
          # Create image tags
          image_tag="${AWS_ECR_REPOSITORY_NAME}:${BRANCH_NAME}-${latest_commit}"
          latest_tag="${AWS_ECR_REPOSITORY_NAME}:${BRANCH_NAME}-latest"
          
          # Build and tag images
          docker build --no-cache -t $image_tag .
          docker tag $image_tag $latest_tag
          
          # Create full URIs
          image_uri="${AWS_ECR_REGISTRY_URI}/${image_tag}"
          latest_uri="${AWS_ECR_REGISTRY_URI}/${latest_tag}"
          
          # Tag for ECR
          docker tag $image_tag $image_uri
          docker tag $latest_tag $latest_uri
          
          # Push to ECR
          docker push $image_uri
          docker push $latest_uri
          
          echo "Deployed to: $image_uri"
          echo "Latest tag: $latest_uri"

      - name: Deploy to liquidator-bot-v2
        if: github.event.inputs.deploy_to_v2 == 'true' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
        env:
          AWS_REGION: ap-southeast-1
          AWS_ECR_REGISTRY_URI: 864899827754.dkr.ecr.ap-southeast-1.amazonaws.com
          AWS_ECR_REPOSITORY_NAME: liquidator-bot-v2
        run: |
          #!/bin/bash
          set -e
          set -o pipefail
          
          # Determine branch name
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            BRANCH_NAME="${{ github.event.inputs.branch }}"
          else
            BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          fi
          
          # Login to ECR
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY_URI
          
          # Get latest commit hash
          latest_commit=$(git rev-parse --short HEAD)
          
          # Create image tags
          image_tag="${AWS_ECR_REPOSITORY_NAME}:${BRANCH_NAME}-${latest_commit}"
          latest_tag="${AWS_ECR_REPOSITORY_NAME}:${BRANCH_NAME}-latest"
          
          # Build and tag images
          docker build --no-cache -t $image_tag .
          docker tag $image_tag $latest_tag
          
          # Create full URIs
          image_uri="${AWS_ECR_REGISTRY_URI}/${image_tag}"
          latest_uri="${AWS_ECR_REGISTRY_URI}/${latest_tag}"
          
          # Tag for ECR
          docker tag $image_tag $image_uri
          docker tag $latest_tag $latest_uri
          
          # Push to ECR
          docker push $image_uri
          docker push $latest_uri
          
          echo "Deployed to v2: $image_uri"
          echo "Latest v2 tag: $latest_uri" 